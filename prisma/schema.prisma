// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Plant {
  id              String           @id @default(cuid())
  name            String
  description     String?          @db.Text
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  locationId      Int?             @unique
  organizationId  String
  loggers         Logger[]
  meters          Meter[]
  inverters       Inverter[]
  securityDevices SecurityDevice[]
  Organization    Organization?    @relation(fields: [organizationId], references: [id])
  location        Location?        @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([name, organizationId])
}

model Logger {
  id          String      @id @default(cuid())
  plant_id    String
  name        String
  model       String?
  producent   String?
  description String?     @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  plant       Plant       @relation(fields: [plant_id], references: [id], onDelete: Cascade)
  logger_logs LoggerLog[]

  @@unique([name, plant_id])
}

model Location {
  id             Int           @id @default(autoincrement())
  street_address String?       @db.VarChar(255)
  postal_code    String?       @db.VarChar(255)
  city           String?       @db.VarChar(255)
  district       String?       @db.VarChar(255)
  county         String?       @db.VarChar(255)
  state_province String?       @db.VarChar(255)
  country        String?
  // Removed explicit single-entity links if you need more flexibility
  Plant          Plant?
  Organization   Organization?
}

model LoggerLog {
  id                  Int       @id @default(autoincrement())
  logger_id           String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  sys_state           SysState?
  temp_env            Float?
  temp_heat_sink      Float?
  temp_inv            Float?
  insulation_res      Float?
  pv_generation_today Float?
  pv_generation_total Float?

  logger Logger @relation(fields: [logger_id], references: [id])
}

model Meter {
  id          String     @id @default(cuid())
  plant_id    String
  name        String
  model       String?
  producent   String?
  description String?    @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  meter_logs  MeterLog[]
  plant       Plant      @relation(fields: [plant_id], references: [id], onDelete: Cascade)

  @@unique([name, plant_id])
}

model MeterLog {
  id         Int      @id @default(autoincrement())
  meter_id   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  voltage_l1 Float?
  voltage_l2 Float?
  voltage_l3 Float?
  current_l1 Float?
  current_l2 Float?
  current_l3 Float?
  a_power_l1 Float?
  a_power_l2 Float?
  a_power_l3 Float?
  r_power_l1 Float?
  r_power_l2 Float?
  r_power_l3 Float?
  meter      Meter    @relation(fields: [meter_id], references: [id])
}

model Inverter {
  id            String        @id @default(cuid())
  plant_id      String
  name          String
  model         String?
  producent     String?
  description   String?       @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  inverter_logs InverterLog[]
  plant         Plant         @relation(fields: [plant_id], references: [id], onDelete: Cascade)

  @@unique([name, plant_id])
}

model InverterLog {
  id          Int      @id @default(autoincrement())
  inverter_id String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  frequency   Float?
  voltage_l1  Float?
  current_l2  Float?
  a_power_l1  Float?
  r_power_l1  Float?

  inverter Inverter @relation(fields: [inverter_id], references: [id])
}

model SecurityDevice {
  id            String              @id @default(cuid())
  plant_id      String
  name          String
  model         String?
  producent     String?
  description   String?             @db.Text
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  security_logs SecurityDeviceLog[]
  plant         Plant               @relation(fields: [plant_id], references: [id], onDelete: Cascade)

  @@unique([name, plant_id])
}

model SecurityDeviceLog {
  id          Int      @id @default(autoincrement())
  inverter_id String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  frequency   Float?
  voltage_l1  Float?
  current_l2  Float?
  a_power_l1  Float?
  r_power_l1  Float?

  device SecurityDevice @relation(fields: [inverter_id], references: [id])
}

enum SysState {
  WAITING
  CHECKING
  ON_GRID
  EMERGENCY_MODE
  RECOVERY_FAULT
  PERMAMENT_FAILURE
  UPGRADING
  SELF_CHARGING
}

model User {
  id                      String                   @id @default(cuid())
  username                String?                  @unique
  name                    String
  bio                     String?
  email                   String                   @unique
  emailVerified           DateTime?
  hashedPassword          String?
  image                   String?
  company_id              String?
  isTwoFactorEnabled      Boolean                  @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  accounts                Account[]
  sessions                Session[]
  authenticators          Authenticator[] // Optional for WebAuthn support
  company                 Company?                 @relation("CompanyUsers", fields: [company_id], references: [id])
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  // New relationship fields for organizations
  organizationMemberships OrganizationMembership[]
  ownedCompany            Company?                 @relation("CompanyOwner")
  request                 Request[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id       String    @id @default(cuid())
  owner_id String    @unique
  name     String    @unique
  owner    User      @relation("CompanyOwner", fields: [owner_id], references: [id])
  users    User[]    @relation("CompanyUsers")
  requests Request[]
}

model Organization {
  id               String   @id @default(cuid())
  name             String   @unique
  stripeCustomerId String?
  locationId       Int?     @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  members  OrganizationMembership[]
  plants   Plant[]
  location Location?                @relation(fields: [locationId], references: [id], onDelete: Cascade)
  requests Request[]
}

// New model to replace OrganizationUser
model OrganizationMembership {
  userId         String
  organizationId String
  role           UserRole @default(USER)

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@id([userId, organizationId])
}

enum UserRole {
  ADMIN
  USER
  OWNER
}

model Request {
  id             String        @id @default(cuid())
  userId         String
  companyId      String?
  organizationId String?
  status         RequestStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  company      Company?      @relation(fields: [companyId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])

  @@unique([userId, companyId])
  @@unique([userId, organizationId])
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
